import * as React from 'react';<% if (connect) { %>
import { bindActionCreators, Dispatch } from 'redux';
import { connect } from 'react-redux';<% if (url) {%>
import { RouteComponentProps } from 'react-router-dom';
<%} %>

import { IRootState } from '@src/types';

// @ts-ignore
import * as actions from './redux/actions';
<% } %>
// own props
export interface I<%= componentName %>Props {}
<% if (!pure) { %>
// own state
export interface I<%= componentName %>State {}  
<% } %>

<% if (connect) { %>

type StateProps  = ReturnType<typeof mapStateToProps>;
type DispatchProps  = ReturnType<typeof mapDispatchToProps>;
<% } %>

type Props = <%= url ? `RouteComponentProps<any> & ` : '' %><%= connect ? 'StateProps & DispatchProps & ' : '' %>I<%= componentName %>Props;

<% if (connect) {%>
export class <%= componentName %> extends React.<%= pure ? 'PureComponent' : 'Component' %><Props<%= pure ? '': ', I' + componentName + 'State' %>> {
<% } else { %>
export default class <%= componentName %> extends React.<%= pure ? 'PureComponent' : 'Component' %><Props<%= pure ? '': ', I' + componentName + 'State' %>> {
<% } %>
  public render() {
    return (
      <div/>
    );
  }
}
<% if (connect) { %>

/* istanbul ignore next */
function mapStateToProps(state: IRootState, ownProps: I<%= componentName %>Props) {
  return {};
}

/* istanbul ignore next */
function mapDispatchToProps(dispatch: Dispatch, ownProps: I<%= componentName %>Props) {
  return {
    actions: bindActionCreators({ ...actions }, dispatch)
  };
}

export default connect<StateProps, DispatchProps, I<%= componentName %>Props>(mapStateToProps, mapDispatchToProps)(<%= componentName %>);
<% } %>